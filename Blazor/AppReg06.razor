@page "/"
@using Azure.Core
@using Azure.Identity
@using Microsoft.Graph
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq
@using System.Text;
@using System.Reflection
@using System.Collections
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime

<h3>App Registrations</h3>

<table class="table">
    <thead>
        <tr>
            <th>Display Name</th>
            <th>Application Id</th>
            <th>Object Id</th>
            <th>Secret / Expiration / Last Updated</th>
        </tr>
    </thead>
    <tbody>

        @if (Apps != null)
        {
            @foreach (var a in Apps)
            {
                <tr>
                    <td class="display-name" @onclick=@(() =>ShowEditModal(@a.ObjectId))>@a.DisplayName </td>
                    <td>@a.AppId</td>
                    <td>@a.ObjectId</td>
                    @if (@a.SecretsList != null)
                    {
                        <td >
                            @foreach (var sec in @a.SecretsList)
                            {
                                <button class="btn btn-danger" style="margin-top: 1px;" @onclick=@(() => RotateSecret(sec.KeyId, a.ObjectId)
                                        )><span class="oi oi-reload" aria-hidden="true"></span></button>
                                <label style="margin-top: 0px; margin-left:3px">@sec.Hint*** /</label>
                                <label>@sec.EndDateTime /</label>
                                <label>@sec.StartDateTime </label>
                                <br />
                            }
                        </td>
                    }
                </tr>
            }
        }

    </tbody>
</table>

@if (NewSecret != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block; background-color:rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save Secret</h5>
                    <button type="button" class="close" @onclick="HideModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@NewSecret</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (Edit)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">

            <EditForm Model="@App" OnValidSubmit="@(() => HandleUpdateBook(App))" class="modal-content" style="border-radius:15px">
                <div class="edit-win"><b style="font-size:30px;">Edit App Registration</b></div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                @* <br /> *@
                <div class="edit-win">
                    <label for="name">Created:</label>
                    <label for="name">@App.CreateTime</label>
                </div>
                <div class="edit-win">
                    <label for="name">Object Id:</label>
                    <label for="name">@App.ObjectId</label>
                </div>
                <div class="edit-win">
                    <label for="name">Application Id:</label>
                    <label for="name">@App.AppId</label>
                </div>
                <div class="edit-win">
                    <label for="name">Display Name:</label>
                    <InputText @bind-Value="App.DisplayName" class="form-control" id="title"></InputText>
                    <ValidationMessage For="@(() => App.DisplayName)" />
                </div>
                <div class="edit-win">
                    <label for="name">Home Page:</label>
                    <InputText @bind-Value="App.HomePageUrl" class="form-control" id="title" placeholder="https://mywebsite.com"></InputText>
                    <ValidationMessage For="@(() => App.HomePageUrl)" />
                </div>
                <div class="edit-win">
                    <label for="name">Notes:</label>
                    <InputText @bind-Value="App.Notes" class="form-control" id="title"></InputText>
                    <ValidationMessage For="@(() => App.Notes)" />
                </div>
                <br />

                <div class="edit-win">
                    <button type="submit" class="btn btn-danger">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideEditModal">Close</button>
                    <div style="word-wrap: break-word; margin-top:10px"> <p>@String1</p> </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (false)
{
    <div class="modal" id="editModal" style="display:none; position:fixed; z-index:1; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.4);">
        <div class="modal-content" style="background-color:#fefefe; margin:15% auto; padding:20px; border:1px solid #888; width:80%;">
            <span class="close" style="color:#aaa; float:right; font-size:28px; font-weight:bold;" onclick="closeModal()">&times;</span>
            <h2>Edit Item</h2>
            <form id="editForm">
                <label for="itemName">Item Name:</label><br>
                <input type="text" id="itemName" name="itemName" style="width:100%;"><br><br>
                <label for="itemDescription">Description:</label><br>
                <textarea id="itemDescription" name="itemDescription" style="width:100%; height:100px;"></textarea><br><br>
                <button type="submit" style="background-color:#4CAF50; color:white; padding:10px 15px; border:none; cursor:pointer;">Save Changes</button>
            </form>
        </div>
    </div>
}

<style>

    div.modal {
    background-color: rgba(0,0,0,0.7);
    }

    td.display-name:hover {
    background-color: oldlace;
    border-radius: 25px;
    }

    div.edit-win {
    margin:15px
    }

</style>


@code {
    List<AppReg>? Apps = new List<AppReg>();
    AppReg? App = new AppReg();
    // AppEdit? AppEdit2 = new AppEdit();
    string? NewSecret = null;
    string? String1 = null;
    bool Edit = false;

    public Rotator2()
    {
        GetApps();
    }


    public async Task<string> GetMgToken()
    {
        AccessToken token = await new ChainedTokenCredential(
         //new ManagedIdentityCredential() //For Managed Identity
         new EnvironmentCredential() //For Local Run, environment variables
        ).GetTokenAsync(
             new TokenRequestContext(
             new[] { "https://graph.microsoft.com/.default" }
             )
         ).ConfigureAwait(false);
        //Save these environment variables:
        //AZURE_TENANT_ID
        //AZURE_CLIENT_ID
        //AZURE_CLIENT_SECRET

        return token.Token;
    }

    public async Task GetApps()
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        var httpResponseKey = httpClient.GetAsync(Url);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "OK")
        {

            if (Apps != null)
            {
                foreach (dynamic app in response?.value)
                {
                    List<AppSecrets>? Secretss = new List<AppSecrets>();

                    foreach (dynamic se in app?.passwordCredentials)
                    {
                        Secretss.Add(
                        new AppSecrets
                        {
                                DisplayName = se.displayName,
                                EndDateTime = se.endDateTime,
                                Hint = se.hint,
                                KeyId = se.keyId,
                                StartDateTime = se.startDateTime
                        });
                    }

                    Apps?.Add(
                    new AppReg
                        {
                            AppId = app?.appId,
                            DisplayName = app?.displayName,
                            ObjectId = app?.id,
                            SecretsList = Secretss.Where(o=>o.DisplayName == "customer_secret").ToList()
                        });
                }
            }
        }
    }

    public async Task GetApp(string objectId)
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        var httpResponseKey = httpClient.GetAsync(Url);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "OK")
        {

            var app = new AppReg
                {
                    AppId = response?.appId,
                    DisplayName = response?.displayName,
                    ObjectId = response?.id,
                    CreateTime = response?.createdDateTime,
                    Notes = response?.notes,
                    HomePageUrl = response?.web?.homePageUrl,
                    SecretsList = null
                };
            App = app;
        }
    }

    public async Task UpdateApp(AppReg app)
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications/{app.ObjectId}";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        List<string> uris = new List<string> {"https://google.se"};

        var jsonContent = new StringContent(JsonConvert.SerializeObject(new
        {
            notes = string.IsNullOrEmpty(app?.Notes) ? "\u0020" : app?.Notes,
            displayName = $"{app?.DisplayName}",
            web = new { homePageUrl = $"{app?.HomePageUrl}" }

        }), Encoding.UTF8, "application/json");
        var httpResponseKey = httpClient.PatchAsync(Url, jsonContent);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "NoContent") {

            String1 = "Saved";
        }
        else 
        {
            String1 = "Error: " + httpResponseKey.Result.Content.ReadAsStringAsync().Result;
        }
    }

    public async Task RotateSecret(string keyId, string objectId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to rotate the secret?"))
        {
            //GET request
            string Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}";
            //Console.WriteLine("URL: " + Url);
            System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
            string MgToken = GetMgToken().Result;
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var httpResponseKey = httpClient.GetAsync(Url);
            //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
            var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
            dynamic? response = JsonConvert.DeserializeObject(jsonResult);

            if (httpResponseKey.Result.StatusCode.ToString() == "OK")
            {

                JArray customer_secret = JArray.Parse(response?.passwordCredentials.ToString());

                if (keyId != null)
                {
                    var jsonContent = new StringContent(JsonConvert.SerializeObject(new
                    {
                        keyId = keyId

                    }), Encoding.UTF8, "application/json");
                    Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}/removePassword";
                    httpResponseKey = httpClient.PostAsync(Url, jsonContent);
                }
                if (httpResponseKey.Result.StatusCode.ToString() == "NoContent" || keyId == null)
                {
                    var jsonContent2 = new StringContent(JsonConvert.SerializeObject(new
                    {
                        passwordCredential = new { displayName = "customer_secret" }

                    }), Encoding.UTF8, "application/json");
                    //Create
                    Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}/addPassword";
                    httpResponseKey = httpClient.PostAsync(Url, jsonContent2);
                    var jsonResulta = await httpResponseKey.Result.Content.ReadAsStringAsync();
                    dynamic? responsee = JsonConvert.DeserializeObject(jsonResulta);

                    NewSecret = responsee.secretText.ToString();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }

    void NevigateToYourUrl()
    {
        _navManager.NavigateTo("/", true);
    }

    private void HideModal()
    {
        NewSecret = null;
        NevigateToYourUrl();
    }

    private void ShowEditModal(string objectId)
    {
        Edit = true;
        GetApp(objectId);
    }

    private void HideEditModal()
    {
        Edit = false;
        NevigateToYourUrl();
    }

    private async Task HandleUpdateBook(AppReg app)
    {
        UpdateApp(app);
    }

    public class AppReg
    {
        public string? DisplayName { get; set; }
        public string? AppId { get; set; }
        public string? ObjectId { get; set; }
        public string? CreateTime { get; set; }
        public string? Notes { get; set; }
        public string? HomePageUrl { get; set; }
        public List<AppSecrets>? SecretsList { get; set; }
    }

    public class AppSecrets
    {
        public string? DisplayName { get; set; }
        public string? EndDateTime { get; set; }
        public string? StartDateTime { get; set; }
        public string? KeyId { get; set; }
        public string? Hint { get; set; }
    }
}
