@page "/"
@using Azure.Core
@using Azure.Identity
@using Microsoft.Graph
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq
@using System.Text;
@using System.Reflection;
@using System.Collections;
@using System.Windows;
@inject NavigationManager _navManager
@inject IJSRuntime JSRuntime

<h3 class="text-common">App Registrations</h3>

<button @onclick="ToggleDarkMode"
class=@(isDarkMode ? "btn btn-warning" : "btn btn-secondary")>
    Toggle Dark/Light Mode
</button>

<table class="table">
    <thead>
        <tr class="text-common">
            <th>Display Name</th>
            <th>Application Id</th>
            <th>Object Id</th>
            <th>Secret / Expiration / Last Updated</th>
        </tr>
    </thead>
    <tbody>

        @if (Apps != null)
        {
            @foreach (var a in Apps)
            {
                <tr>
                    <td class="text-common" @onclick=@(() =>ShowEditModal(@a.ObjectId))>@a.DisplayName</td>
                    <td class="text-common">
                        @a.AppId 
                        <button @onclick=@(() => CopyToClipboard(@a.AppId)) class="clipboard" >
                            <span class="oi oi-document" title="Copy Application Id"></span>
                        </button>
                    </td>
                    <td class="text-common">
                        @a.ObjectId
                        <Tooltip Text="Copy Object Id">
                            <button @onclick=@(() => CopyToClipboard(@a.ObjectId)) class="clipboard">
                                <span class="oi oi-document"></span> 
                            </button>
                        </Tooltip>
                    </td>
                    @if (@a.SecretsList != null)
                    {
                        <td class="text-common">
                            @foreach (var sec in @a.SecretsList)
                            {
                                <button class="btn btn-danger" style="margin-top: 1px;" @onclick=@(() => RotateSecret(sec.KeyId, a.ObjectId))>
                                    <span class="oi oi-reload"></span></button>
                                <label style="margin-top: 0px; margin-left:3px">@sec.Hint*** /</label>
                                <label>@sec.EndDateTime /</label>
                                <label>@sec.StartDateTime </label>
                                <br />
                            }
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@if (NewSecret != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block; background-color:rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save Secret</h5>
                    <button type="button" class="close" @onclick="HideModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@NewSecret</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (Edit)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">

            <EditForm Model="@App" OnValidSubmit="@(() => HandleUpdateBook(App))" class="modal-content" style="border-radius:15px">
                <div class="edit-win"><b style="font-size:30px;">Edit App Registration</b></div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="edit-win">
                    <label for="name">Created:</label>
                    <label for="name">@App?.CreateTime</label>
                </div>
                <div class="edit-win" style="display:flex">
                    <label for="name">Object Id:</label>
                    <div for="name" >@App.ObjectId</div>
                </div>
                <div class="edit-win" style="display:flex">
                    <label for="name">Application Id:</label>
                    <label for="name">@App.AppId</label>
                </div>
                <div class="edit-win">
                    <label for="name">Display Name:</label>
                    <InputText @bind-Value="App.DisplayName" class="form-control" id="dn"></InputText>
                    <ValidationMessage For="@(() => App.DisplayName)" />
                </div>
                <div class="edit-win">
                    <label for="name">Home Page:</label>
                    <InputText @bind-Value="App.HomePageUrl" class="form-control" id="hp" placeholder="https://mywebsite.com"></InputText>
                    <ValidationMessage For="@(() => App.HomePageUrl)" />
                </div>
                <div class="edit-win">
                    <label for="name">Notes:</label>
                    <InputText @bind-Value="App.Notes" class="form-control" id="no"></InputText>
                    <ValidationMessage For="@(() => App.Notes)" />
                </div>
                <div class="edit-win">
                    <label for="author">Term Page:</label>
                    <InputSelect @bind-Value="App.TermPageUrl" class="form-select" id="author">
                        <option value="">-- Select Url --</option>
                        @foreach (var p in TermPageUrls)
                        {
                            <option value="@p">@p</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => App.TermPageUrl)"></ValidationMessage>
                </div>
                <div class="edit-win">
                    <button type="submit" class="btn btn-danger" @onmousedown="@(() => HideSaveText())">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideEditModal">Close</button>
                    <div style="word-wrap: break-word; margin-top:10px; white-space: pre-line"> <p>@String1</p> </div>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>

    html, body {
    background-color: @(isDarkMode ? "rgba(10,10,10,0.7)" : "white");
    }

    .text-common {
    color: @(isDarkMode ? "white" : "black")
    }

    div.modal {
    background-color: rgba(10,10,10,0.7);

    color: @(isDarkMode ? "white" : "black")
    }

    .modal-content {
    background-color: @(isDarkMode ? "rgba(35,35,35,1)" : "white");
    }

    td.display-name:hover {
    border-radius: 25px;
    }

    div.edit-win {
    margin:15px;
    color: @(isDarkMode ? "white" : "black");
    }

    .form-control,
    .form-select  {
    background-color: @(isDarkMode ? "rgba(165,165,165,1)" : "white");
    }

    button.clipboard {
    color: black;
    border: none;
    background: none;
    color: @(isDarkMode ? "white" : "black")
    }

    button.clipboard:hover {
    color: lightgrey;
    content: close-quote
    }

</style>


@code {
    List<AppReg>? Apps = new List<AppReg>();
    AppReg? App = new AppReg();
    string? NewSecret = null;
    string? String1 = null;
    bool Edit = false;
    bool HideSave = false;
    bool isDarkMode = false;
    List<string> TermPageUrls = new List<string> 
    {
        "https://abc.app.eu.opsgenie.com/",
        "https://portal.azure.com/",
        "https://support.se/",
        "https://myterms.com/"
    };
    public Rotator2()
    {
        GetApps();
    }

    public async Task<string> GetMgToken()
    {
        AccessToken token = await new ChainedTokenCredential(
         //new ManagedIdentityCredential() //For Managed Identity
         new EnvironmentCredential() //For Local Run, environment variables
        ).GetTokenAsync(
             new TokenRequestContext(
             new[] { "https://graph.microsoft.com/.default" }
             )
         ).ConfigureAwait(false);
        //Save these environment variables:
        //AZURE_TENANT_ID
        //AZURE_CLIENT_ID
        //AZURE_CLIENT_SECRET

        return token.Token;
    }

    public async Task GetApps()
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        var httpResponseKey = httpClient.GetAsync(Url);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "OK")
        {

            if (Apps != null)
            {
                foreach (dynamic app in response?.value)
                {
                    List<AppSecrets>? Secretss = new List<AppSecrets>();

                    foreach (dynamic se in app?.passwordCredentials)
                    {
                        Secretss.Add(
                        new AppSecrets
                        {
                                DisplayName = se.displayName,
                                EndDateTime = se.endDateTime,
                                Hint = se.hint,
                                KeyId = se.keyId,
                                StartDateTime = se.startDateTime
                        });
                    }

                    Apps?.Add(
                    new AppReg
                        {
                            AppId = app?.appId,
                            DisplayName = app?.displayName,
                            ObjectId = app?.id,
                            SecretsList = Secretss.Where(o=>o.DisplayName == "customer_secret").ToList()
                        });
                }
            }
        }
    }

    public async Task GetApp(string objectId)
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        var httpResponseKey = httpClient.GetAsync(Url);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "OK")
        {
            var app = new AppReg
                {
                    AppId = response?.appId,
                    DisplayName = response?.displayName,
                    ObjectId = response?.id,
                    CreateTime = response?.createdDateTime,
                    Notes = response?.notes,
                    HomePageUrl = response?.web?.homePageUrl,
                    TermPageUrl = response?.info?.termsOfServiceUrl,
                    SecretsList = null
                };
            App = app;
        }
    }

    public async Task UpdateApp(AppReg app)
    {
        //GET request
        string Url = $"https://graph.microsoft.com/v1.0/applications/{app.ObjectId}";
        //Console.WriteLine("URL: " + Url);
        System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
        string MgToken = GetMgToken().Result;
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        List<string> uris = new List<string> {"https://google.se"};

        var jsonContent = new StringContent(JsonConvert.SerializeObject(new
        {
            notes = string.IsNullOrEmpty(app?.Notes) ? "\u0020" : app?.Notes,
            displayName = $"{app?.DisplayName}",
            web = new { homePageUrl = $"{app?.HomePageUrl}" },
            info = new { termsOfServiceUrl = $"{app?.TermPageUrl}" }

        }), Encoding.UTF8, "application/json");
        var httpResponseKey = httpClient.PatchAsync(Url, jsonContent);
        //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
        var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
        dynamic? response = JsonConvert.DeserializeObject(jsonResult);

        if (httpResponseKey.Result.StatusCode.ToString() == "NoContent") {

            String1 = "Saved";
        }
        else 
        {
            String1 = "Error: " + httpResponseKey.Result.Content.ReadAsStringAsync().Result;
        }
    }

    public async Task RotateSecret(string keyId, string objectId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to rotate the secret?"))
        {
            //GET request
            string Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}";
            //Console.WriteLine("URL: " + Url);
            System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient();
            string MgToken = GetMgToken().Result;
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + MgToken);
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var httpResponseKey = httpClient.GetAsync(Url);
            //Console.WriteLine("IsSuccessStatusCode: " + httpResponseKey.IsSuccessStatusCode);
            var jsonResult = await httpResponseKey.Result.Content.ReadAsStringAsync();
            dynamic? response = JsonConvert.DeserializeObject(jsonResult);

            if (httpResponseKey.Result.StatusCode.ToString() == "OK")
            {

                JArray customer_secret = JArray.Parse(response?.passwordCredentials.ToString());

                if (keyId != null)
                {
                    var jsonContent = new StringContent(JsonConvert.SerializeObject(new
                    {
                        keyId = keyId

                    }), Encoding.UTF8, "application/json");
                    Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}/removePassword";
                    httpResponseKey = httpClient.PostAsync(Url, jsonContent);
                }
                if (httpResponseKey.Result.StatusCode.ToString() == "NoContent" || keyId == null)
                {
                    var jsonContent2 = new StringContent(JsonConvert.SerializeObject(new
                    {
                        passwordCredential = new { displayName = "customer_secret" }

                    }), Encoding.UTF8, "application/json");
                    //Create
                    Url = $"https://graph.microsoft.com/v1.0/applications/{objectId}/addPassword";
                    httpResponseKey = httpClient.PostAsync(Url, jsonContent2);
                    var jsonResulta = await httpResponseKey.Result.Content.ReadAsStringAsync();
                    dynamic? responsee = JsonConvert.DeserializeObject(jsonResulta);

                    NewSecret = responsee.secretText.ToString();
                }
            }
        }
    }

    private async Task CopyToClipboard(string value)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", value);
    }

    protected override async Task OnInitializedAsync()
    {
        CookieService coo = new CookieService(JSRuntime);
        var cookieValue = await coo.GetCookie("darkMode");
         isDarkMode = cookieValue == "true";
    }

    void NevigateToYourUrl()
    {
        _navManager.NavigateTo("/", true);
    }

    private void HideModal()
    {
        NewSecret = null;
        NevigateToYourUrl();
    }

    private void ShowEditModal(string objectId)
    {
        Edit = true;
        GetApp(objectId);
    }

    private void HideEditModal()
    {
        Edit = false;
        NevigateToYourUrl();
    }

    private void HideSaveText()
    {
        String1 = null;
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        CookieService coo = new CookieService(JSRuntime);
        await coo.SetCookie("darkMode", isDarkMode.ToString().ToLower(), 30);
    }

    private async Task HandleUpdateBook(AppReg app)
    {
        await UpdateApp(app);
    }

    public class AppReg
    {
        public string? DisplayName { get; set; }
        public string? AppId { get; set; }
        public string? ObjectId { get; set; }
        public string? CreateTime { get; set; }
        public string? Notes { get; set; }
        public string? HomePageUrl { get; set; }
        public string? TermPageUrl { get; set; }
        public List<AppSecrets>? SecretsList { get; set; }
    }

    public class AppSecrets
    {
        public string? DisplayName { get; set; }
        public string? EndDateTime { get; set; }
        public string? StartDateTime { get; set; }
        public string? KeyId { get; set; }
        public string? Hint { get; set; }
    }

    //Add to Program.cs builder.Services.AddScoped<CookieService>();
    public class CookieService
    {
        private readonly IJSRuntime _jsRuntime;

        public CookieService(IJSRuntime jsRuntime)
        {
            _jsRuntime = jsRuntime;
        }

        public async Task SetCookie(string name, string value, int days)
        {
            var expirationDate = DateTime.UtcNow.AddDays(days);
            await _jsRuntime.InvokeVoidAsync("eval", $"document.cookie = '{name}={value}; expires={expirationDate.ToString("R")}; path=/';");
        }

        public async Task<string> GetCookie(string name)
        {
            var cookieValue = await _jsRuntime.InvokeAsync<string>("eval", $"(function() {{ var name = '{name}='; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(';'); for (var i = 0; i < ca.length; i++) {{ var c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1); if (c.indexOf(name) == 0) return c.substring(name.length, c.length); }} return ''; }})()");
            return cookieValue;
        }
    }
}
